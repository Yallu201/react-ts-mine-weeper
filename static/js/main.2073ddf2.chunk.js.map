{"version":3,"sources":["store/Cell.ts","store/Row.ts","store/Board.tsx","store/Game.tsx","components/Header.tsx","components/Cell.tsx","components/Board.tsx","App.tsx","index.tsx"],"names":["CellStore","row","column","__row","__column","__isOpened","__isMine","__isChecked","__mineCount","this","makeObservable","observable","open","action","check","input","count","RowStore","index","cells","__index","__cells","cell","push","BoardStore","__clickCount","__rowCount","__columnCount","__rows","__openCellCount","init","setMine","openMines","openEmptyCells","openCell","addOpenCell","rows","col","isTopRow","isBottomRow","isLeftColumn","isRightColumn","isMine","mineCount","i","j","forEach","isOpened","row_","col_","offsetRow","offsetCol","nextRow","nextCol","BoardContext","createContext","BoardProvider","store","children","Provider","value","useBoardStore","useContext","GameStore","__seconds","__checkCount","__interval","__isGameOver","__isGameStart","leftMineCount","computed","addSecond","start","reset","gameOver","addCheckCount","Math","max","setInterval","bind","clearInterval","GameContext","GameProvider","useGameStore","Header","observer","boardStore","gameStore","onReset","useCallback","className","type","onClick","seconds","CellComponent","buttonRef","useRef","useEffect","preventContextMenu","e","preventDefault","mouseHandler","buttons","offSet","isChecked","current","addEventListener","removeEventListener","isGameOver","isGameStart","content","useMemo","ref","Board","board","clickCount","set","Set","size","mineIndex","floor","ROW","random","has","add","map","r_index","c_index","Cell","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2073ddf2.chunk.js","sourcesContent":["import { action, makeObservable, observable } from \"mobx\";\r\n\r\nexport type CellIndex = number | null;\r\nexport default class CellStore {\r\n  __row: CellIndex = null;\r\n  __column: CellIndex = null;\r\n  __isOpened: boolean = false;\r\n  __isMine: boolean = false;\r\n  __isChecked: boolean = false;\r\n  __mineCount: number = 0;\r\n\r\n  constructor(row: number, column: number) {\r\n    this.__row = row;\r\n    this.__column = column;\r\n\r\n    makeObservable(this, {\r\n      __row: observable,\r\n      __column: observable,\r\n      __isOpened: observable,\r\n      __isMine: observable,\r\n      __isChecked: observable,\r\n      __mineCount: observable,\r\n      open: action,\r\n      check: action,\r\n    });\r\n  }\r\n\r\n  get row(): CellIndex {\r\n    return this.__row;\r\n  }\r\n  get column(): CellIndex {\r\n    return this.__column;\r\n  }\r\n  get isOpened(): boolean {\r\n    return this.__isOpened;\r\n  }\r\n  set isOpened(input: boolean) {\r\n    this.__isOpened = input;\r\n  }\r\n  get isMine(): boolean {\r\n    return this.__isMine;\r\n  }\r\n  set isMine(input: boolean) {\r\n    this.__isMine = input;\r\n  }\r\n  get isChecked() {\r\n    return this.__isChecked;\r\n  }\r\n  get mineCount(): number {\r\n    return this.__mineCount;\r\n  }\r\n  set mineCount(count: number) {\r\n    this.__mineCount = count;\r\n  }\r\n\r\n  open() {\r\n    if (this.__isChecked) return;\r\n    this.__isOpened = true;\r\n  }\r\n\r\n  check() {\r\n    if (this.__isOpened) return;\r\n    this.__isChecked = !this.__isChecked;\r\n  }\r\n}\r\n","import { makeObservable, observable } from \"mobx\";\r\nimport Cell from \"./Cell\";\r\n\r\ntype RowIndex = number | null;\r\nexport default class RowStore {\r\n  __index: RowIndex = null;\r\n  __cells: Cell[];\r\n\r\n  constructor(index: number, cells: Cell[]) {\r\n    this.__index = index;\r\n    this.__cells = cells;\r\n\r\n    makeObservable(this, {\r\n      __index: observable,\r\n      __cells: observable,\r\n    });\r\n  }\r\n\r\n  get index(): RowIndex {\r\n    return this.__index;\r\n  }\r\n  get cells(): Cell[] {\r\n    return this.__cells;\r\n  }\r\n  set cells(cells: Cell[]) {\r\n    this.__cells = cells;\r\n  }\r\n  push(cell: Cell) {\r\n    this.__cells.push(cell);\r\n  }\r\n}\r\n","import { action, makeObservable, observable } from \"mobx\";\r\nimport { createContext, FC, useContext } from \"react\";\r\nimport CellStore, { CellIndex } from \"./Cell\";\r\nimport RowStore from \"./Row\";\r\nexport default class BoardStore {\r\n  __clickCount: number = 0;\r\n  __rowCount: number = 9;\r\n  __columnCount: number = 9;\r\n  __rows: RowStore[] = [];\r\n  __openCellCount: number = 0;\r\n\r\n  constructor() {\r\n    this.init();\r\n    makeObservable(this, {\r\n      __rows: observable,\r\n      __rowCount: observable,\r\n      __columnCount: observable,\r\n      __openCellCount: observable,\r\n      push: action,\r\n      setMine: action,\r\n      init: action,\r\n      openMines: action,\r\n      openEmptyCells: action,\r\n      openCell: action,\r\n      addOpenCell: action,\r\n    });\r\n  }\r\n\r\n  get clickCount(): number {\r\n    return this.__clickCount;\r\n  }\r\n  set clickCount(count: number) {\r\n    this.__clickCount = count;\r\n  }\r\n  get rows(): RowStore[] {\r\n    return this.__rows;\r\n  }\r\n  set rows(rows: RowStore[]) {\r\n    this.__rows = rows;\r\n  }\r\n  get openCellCount(): number {\r\n    return this.__openCellCount;\r\n  }\r\n\r\n  push(row: RowStore) {\r\n    this.__rows.push(row);\r\n  }\r\n\r\n  setMine(row: number, col: number) {\r\n    const isTopRow = row === 0;\r\n    const isBottomRow = row === this.__rowCount - 1;\r\n    const isLeftColumn = col === 0;\r\n    const isRightColumn = col === this.__columnCount - 1;\r\n\r\n    this.__rows[row].cells[col].isMine = true;\r\n\r\n    if (!isTopRow) {\r\n      // ■□□  □■□  □□■\r\n      // □□□  □□□  □□□\r\n      // □□□  □□□  □□□\r\n      if (!isLeftColumn) {\r\n        this.__rows[row - 1].cells[col - 1].mineCount += 1;\r\n      }\r\n      this.__rows[row - 1].cells[col].mineCount += 1;\r\n      if (!isRightColumn) {\r\n        this.__rows[row - 1].cells[col + 1].mineCount += 1;\r\n      }\r\n    }\r\n    if (!isBottomRow) {\r\n      // □□□ □□□ □□□\r\n      // □□□ □□□ □□□\r\n      // ■□□ □■□ □□■\r\n      if (!isLeftColumn) {\r\n        this.__rows[row + 1].cells[col - 1].mineCount += 1;\r\n      }\r\n      this.__rows[row + 1].cells[col].mineCount += 1;\r\n      if (!isRightColumn) {\r\n        this.__rows[row + 1].cells[col + 1].mineCount += 1;\r\n      }\r\n    }\r\n    // □□□ □□□\r\n    // ■□□ □□■\r\n    // □□□ □□□\r\n    if (!isLeftColumn) {\r\n      this.__rows[row].cells[col - 1].mineCount += 1;\r\n    }\r\n    if (!isRightColumn) {\r\n      this.__rows[row].cells[col + 1].mineCount += 1;\r\n    }\r\n  }\r\n\r\n  init() {\r\n    this.__clickCount = 0;\r\n    this.__rowCount = 9;\r\n    this.__columnCount = 9;\r\n    this.__rows = [];\r\n    this.__openCellCount = 0;\r\n\r\n    for (let i = 0; i < this.__rowCount; i++) {\r\n      const row = new RowStore(i, []);\r\n      for (let j = 0; j < this.__columnCount; j++) {\r\n        const cell = new CellStore(i, j);\r\n        row.push(cell);\r\n      }\r\n      this.push(row);\r\n    }\r\n  }\r\n\r\n  openMines() {\r\n    this.__rows.forEach((row) => {\r\n      row.cells.forEach((cell) => {\r\n        if (cell.isMine) {\r\n          cell.isOpened = true;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  openEmptyCells(row_: CellIndex, col_: CellIndex) {\r\n    this.openCell(row_, col_);\r\n  }\r\n\r\n  openCell(row: CellIndex, col: CellIndex) {\r\n    if (row === null || col === null) return;\r\n    if (this.__rows[row].cells[col].isMine) return;\r\n    if (this.__rows[row].cells[col].isOpened) return;\r\n    if (this.__rows[row].cells[col].mineCount > 0) {\r\n      this.__rows[row].cells[col].open();\r\n      this.addOpenCell();\r\n      return;\r\n    }\r\n    if (this.__rows[row].cells[col].mineCount === 0) {\r\n      this.__rows[row].cells[col].open();\r\n      this.addOpenCell();\r\n    }\r\n    const CURSOR = [\r\n      [-1, -1],\r\n      [-1, 0],\r\n      [-1, 1],\r\n      [0, -1],\r\n      [0, 1],\r\n      [1, -1],\r\n      [1, 0],\r\n      [1, 1],\r\n    ];\r\n    CURSOR.forEach(([offsetRow, offsetCol]) => {\r\n      const nextRow = row + offsetRow;\r\n      const nextCol = col + offsetCol;\r\n      if (nextRow < 0 || nextRow >= this.__rowCount) return;\r\n      if (nextCol < 0 || nextCol >= this.__columnCount) return;\r\n      this.openCell(row + offsetRow, col + offsetCol);\r\n    });\r\n  }\r\n\r\n  addOpenCell() {\r\n    this.__openCellCount += 1;\r\n  }\r\n}\r\n\r\nexport const BoardContext = createContext<BoardStore>(new BoardStore());\r\nexport const BoardProvider: FC<{ store: BoardStore }> = ({\r\n  store,\r\n  children,\r\n}) => {\r\n  return (\r\n    <BoardContext.Provider value={store}>{children}</BoardContext.Provider>\r\n  );\r\n};\r\nexport const useBoardStore = () => {\r\n  return useContext(BoardContext);\r\n};\r\n","import { action, computed, makeObservable, observable } from \"mobx\";\r\nimport { createContext, FC, useContext } from \"react\";\r\nconst ONE_SECOND = 1000;\r\nexport default class GameStore {\r\n  __seconds: number = 0;\r\n  __mineCount: number = 10;\r\n  __checkCount: number = 0;\r\n  __interval: NodeJS.Timeout | null = null;\r\n  __isGameOver: boolean = false;\r\n  __isGameStart: boolean = false;\r\n  constructor() {\r\n    makeObservable(this, {\r\n      __seconds: observable,\r\n      __mineCount: observable,\r\n      __checkCount: observable,\r\n      leftMineCount: computed,\r\n      addSecond: action,\r\n      start: action,\r\n      reset: action,\r\n      gameOver: action,\r\n      addCheckCount: action,\r\n    });\r\n  }\r\n\r\n  get seconds() {\r\n    return this.__seconds;\r\n  }\r\n  get mineCount() {\r\n    return this.__mineCount;\r\n  }\r\n  get isGameOver() {\r\n    return this.__isGameOver;\r\n  }\r\n  get isGameStart() {\r\n    return this.__isGameStart;\r\n  }\r\n\r\n  get leftMineCount() {\r\n    return Math.max(0, this.__mineCount - this.__checkCount);\r\n  }\r\n  addSecond() {\r\n    this.__seconds += 1;\r\n  }\r\n  start() {\r\n    this.__isGameStart = true;\r\n    if (this.__interval) return;\r\n    this.__interval = setInterval(this.addSecond.bind(this), ONE_SECOND);\r\n  }\r\n\r\n  reset() {\r\n    this.__seconds = 0;\r\n    this.__mineCount = 10;\r\n    this.__checkCount = 0;\r\n    this.__isGameStart = false;\r\n    this.__isGameOver = false;\r\n    if (!this.__interval) return;\r\n    clearInterval(this.__interval);\r\n    this.__interval = null;\r\n  }\r\n\r\n  gameOver() {\r\n    this.__isGameOver = true;\r\n    if (!this.__interval) return;\r\n    clearInterval(this.__interval);\r\n    this.__interval = null;\r\n  }\r\n\r\n  addCheckCount(input: number) {\r\n    this.__checkCount += input;\r\n  }\r\n}\r\n\r\nexport const GameContext = createContext<GameStore>(new GameStore());\r\n// .tsx 파일에서만 jsx 문법 사용가능\r\nexport const GameProvider: FC<{ store: GameStore }> = ({ store, children }) => {\r\n  return <GameContext.Provider value={store}>{children}</GameContext.Provider>;\r\n};\r\nexport const useGameStore = () => {\r\n  return useContext(GameContext);\r\n};\r\n","import { observer } from \"mobx-react\";\r\nimport { useCallback } from \"react\";\r\nimport { useBoardStore } from \"../store/Board\";\r\nimport { useGameStore } from \"../store/Game\";\r\n\r\nconst Header = observer(() => {\r\n  const boardStore = useBoardStore();\r\n  const gameStore = useGameStore();\r\n  const onReset = useCallback(() => {\r\n    gameStore.reset();\r\n    boardStore.init();\r\n  }, [gameStore, boardStore]);\r\n  return (\r\n    <div className=\"header-wrap\">\r\n      <input type=\"text\" value={gameStore.leftMineCount} />\r\n      <button onClick={onReset}>reset</button>\r\n      <input type=\"text\" value={gameStore.seconds} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Header;\r\n","import { observer } from \"mobx-react\";\r\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\r\nimport { CellStore } from \"../store\";\r\nimport { useBoardStore } from \"../store/Board\";\r\nimport { useGameStore } from \"../store/Game\";\r\nimport { CellIndex } from \"../store/Cell\";\r\ntype CellProps = {\r\n  cell: CellStore;\r\n  setMine: (arg0: CellIndex, arg1: CellIndex) => void;\r\n};\r\nconst CellComponent = observer(({ cell, setMine }: CellProps) => {\r\n  const gameStore = useGameStore();\r\n  const boardStore = useBoardStore();\r\n  const buttonRef = useRef<HTMLButtonElement>(null);\r\n  useEffect(() => {\r\n    if (buttonRef && buttonRef.current) {\r\n      buttonRef.current.addEventListener(\"mousedown\", mouseHandler);\r\n      buttonRef.current.addEventListener(\"contextmenu\", preventContextMenu);\r\n    }\r\n    function preventContextMenu(e: MouseEvent) {\r\n      e.preventDefault();\r\n    }\r\n    function mouseHandler(e: MouseEvent) {\r\n      const [LEFT, RIGHT, TOGETHER] = [1, 2, 3];\r\n      switch (e.buttons) {\r\n        // case LEFT:\r\n        //   break;\r\n        case RIGHT:\r\n          const offSet = cell.isChecked ? -1 : 1;\r\n          gameStore.addCheckCount(offSet);\r\n          cell.check();\r\n          break;\r\n        case TOGETHER:\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n    return () => {\r\n      if (buttonRef && buttonRef.current) {\r\n        buttonRef.current.removeEventListener(\"mousedown\", mouseHandler);\r\n        buttonRef.current.removeEventListener(\r\n          \"contextmenu\",\r\n          preventContextMenu\r\n        );\r\n      }\r\n    };\r\n  }, [cell]);\r\n  const onClick = useCallback(() => {\r\n    if (gameStore.isGameOver || cell.isChecked) {\r\n      return;\r\n    }\r\n    if (cell.isMine) {\r\n      // 지뢰인 경우, 게임 정지 및 모든 지뢰 표시\r\n      boardStore.openMines();\r\n      gameStore.gameOver();\r\n      return;\r\n    }\r\n    if (!gameStore.isGameStart) {\r\n      setMine(cell.row, cell.column);\r\n      gameStore.start();\r\n    }\r\n    if (cell.mineCount === 0) {\r\n      boardStore.openEmptyCells(cell.row, cell.column);\r\n    }\r\n    if (!cell.isOpened) {\r\n      cell.open();\r\n      boardStore.addOpenCell();\r\n    }\r\n  }, [setMine, cell, boardStore, gameStore]);\r\n\r\n  const content = useMemo(() => {\r\n    if (!cell.isMine && cell.isOpened && cell.mineCount > 0) {\r\n      return cell.mineCount;\r\n    }\r\n    return null;\r\n  }, [cell.isMine, cell.mineCount, cell.isOpened]);\r\n\r\n  const className = useMemo(() => {\r\n    const open = cell.isOpened ? \" open\" : \"\";\r\n    const check = cell.isChecked ? \" check\" : \"\";\r\n    const gameOver = gameStore.isGameOver ? \" red\" : \"\";\r\n    return `cell${open}${check}${gameOver}`;\r\n  }, [cell.isMine, cell.isOpened, cell.isChecked, gameStore.isGameOver]);\r\n\r\n  return (\r\n    <button ref={buttonRef} className={className} onClick={onClick}>\r\n      {content}\r\n    </button>\r\n  );\r\n});\r\n\r\nexport default CellComponent;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useCallback } from \"react\";\r\nimport { useBoardStore } from \"../store/Board\";\r\nimport CellComponent from \"./Cell\";\r\nimport { CellIndex } from \"../store/Cell\";\r\n\r\nconst Board = observer(() => {\r\n  const board = useBoardStore();\r\n  const setMine = useCallback(\r\n    (row_: CellIndex, col_: CellIndex) => {\r\n      if (board.clickCount > 0) return;\r\n      board.clickCount += 1;\r\n      const [ROW, COL] = [9, 9];\r\n      const TOTAL_CELL_COUNT = ROW * COL;\r\n      const set = new Set();\r\n      while (set.size < 10) {\r\n        const mineIndex = Math.floor(Math.random() * TOTAL_CELL_COUNT);\r\n        if (set.has(mineIndex)) continue;\r\n        set.add(mineIndex);\r\n        const row = Math.floor(mineIndex / ROW);\r\n        const col = mineIndex % ROW;\r\n        if (row === row_ && col === col_) continue;\r\n        board.setMine(row, col);\r\n      }\r\n    },\r\n    [board]\r\n  );\r\n  return (\r\n    <div className=\"cell-area-wrap\">\r\n      <div className=\"board\">\r\n        {board &&\r\n          board.rows.map((row, r_index) => {\r\n            return (\r\n              <div className=\"row\" key={`row_${r_index}`}>\r\n                {row.cells.map((cell, c_index) => {\r\n                  return (\r\n                    <CellComponent\r\n                      key={`col_${r_index}_${c_index}`}\r\n                      cell={cell}\r\n                      setMine={setMine}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Board;\r\n","import \"./App.css\";\r\nimport { Header, Board } from \"./components\";\r\nimport { BoardProvider, useBoardStore } from \"./store/Board\";\r\nimport { GameProvider, useGameStore } from \"./store/Game\";\r\n\r\nfunction App() {\r\n  const gameStore = useGameStore();\r\n  const boardStore = useBoardStore();\r\n  return (\r\n    <div className=\"container\">\r\n      <GameProvider store={gameStore}>\r\n        <BoardProvider store={boardStore}>\r\n          <Header />\r\n          <Board />\r\n        </BoardProvider>\r\n      </GameProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}